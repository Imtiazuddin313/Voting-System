import java.util.*;

interface Votable {
    void castVote(int candidateIndex);
    void showResults();
    String getWinner();
}
class VotingMachine implements Votable {
    private List<String> candidates;
    private Map<String, Integer> votes;

    public VotingMachine(List<String> candidates) {
        this.candidates = candidates;
        votes = new HashMap<>();
        for (String c : candidates) votes.put(c, 0);
    }

    public void castVote(int index) {
        if (index >= 0 && index < candidates.size()) {
            String name = candidates.get(index);
            votes.put(name, votes.get(name) + 1);
            System.out.println("Vote cast for " + name);
        } else {
            System.out.println("Invalid candidate index.");
        }
    }

    public void showResults() {
        System.out.println("Voting Results:");
        for (String c : candidates)
            System.out.println(c + ": " + votes.get(c));
    }

    public String getWinner() {
        int max = -1;
        String winner = "";
        boolean tie = false;
        for (Map.Entry<String, Integer> entry : votes.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                winner = entry.getKey();
                tie = false;
            } else if (entry.getValue() == max) {
                tie = true;
            }
        }
        return tie ? "It's a tie!" : "Winner: " + winner;
    }

    public List<String> getCandidates() {
        return candidates;
    }
}
class User {
    int id;
    String name;
    public User(int id, String name) {
        this.id = id;
        this.name = name;
    }
    public void vote(VotingMachine vm, int index) {}
}

class Voter extends User {
    public Voter(int id, String name) {
        super(id, name);
    }

    @Override
    public void vote(VotingMachine vm, int index) {
        vm.castVote(index);
    }
}

class Admin extends User {
    public Admin(int id, String name) {
        super(id, name);
    }

    public void viewResults(VotingMachine vm) {
        vm.showResults();
        System.out.println(vm.getWinner());
    }
}
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        List<String> candidates = Arrays.asList("daner Shish", "Dari palla", "Langol");
        VotingMachine vm = new VotingMachine(candidates);
        Set<Integer> votedIds = new HashSet<>();

        System.out.print("Enter number of voters: ");
        int count = sc.nextInt();

        for (int i = 0; i < count; i++) {
            System.out.print("\nEnter voter ID: ");
            int id = sc.nextInt();
            if (votedIds.contains(id)) {
                System.out.println("You have already voted.");
                i--; continue;
            }
            votedIds.add(id);

            sc.nextLine(); 
            System.out.print("Enter voter name: ");
            String name = sc.nextLine();
            Voter voter = new Voter(id, name);

            System.out.println("Choose a candidate:");
            List<String> cands = vm.getCandidates();
            for (int j = 0; j < cands.size(); j++)
                System.out.println((j + 1) + ". " + cands.get(j));

            System.out.print("Enter choice (1-" + cands.size() + "): ");
            int choice = sc.nextInt() - 1;

            if (choice < 0 || choice >= cands.size()) {
                System.out.println("Invalid input. Vote skipped.");
                continue;
            }

            voter.vote(vm, choice);
        }

    
        Admin admin = new Admin(0, "Admin");
        System.out.println("Admin Panel:");
        admin.viewResults(vm);

        sc.close();
    }
}
